name: Build & Release TizenAppInstaller (Native AOT)

# only run on direct pushes to master
on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write   # needed to create releases and upload assets
  actions: read

env:
  DOTNET_VERSION: '9.0.x'
  OUTPUT_DIR: out
  CLI_NAME: TizenAppInstaller

jobs:
  build:
    name: Build matrix
    # use an include matrix so we can pick different runners per RID
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - rid: linux-x64
            os: ubuntu-latest
          - rid: linux-musl-x64
            os: ubuntu-latest
          - rid: win-x64
            os: windows-latest
          - rid: osx-arm64
            os: macos-latest
          - rid: osx-x64
            os: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Publish (${{ matrix.rid }})
        run: |
          set -e
          echo "Publishing for RID: ${{ matrix.rid }} on runner $RUNNER_OS"
          dotnet publish -c Release -r ${{ matrix.rid }} --self-contained true \
            -p:PublishAot=true -p:PublishTrimmed=true -p:PublishSingleFile=true \
            -o $GITHUB_WORKSPACE/${{ env.OUTPUT_DIR }}/${{ matrix.rid }}

      - name: List build outputs
        run: ls -la $GITHUB_WORKSPACE/${{ env.OUTPUT_DIR }}/${{ matrix.rid }} || true

      - name: Upload artifact for ${{ matrix.rid }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CLI_NAME }}-${{ matrix.rid }}
          path: ${{ env.OUTPUT_DIR }}/${{ matrix.rid }}

  create_release:
    name: Create release and upload assets
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      # Download all artifacts created by the build matrix
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.OUTPUT_DIR }}

      # Compute tag & release name
      - name: Compute tag & release name
        id: tag
        run: |
          short_sha=$(echo "${GITHUB_SHA}" | cut -c1-7)
          timestamp=$(date -u +"%Y%m%dT%H%M%SZ")
          TAG="v${timestamp}-${short_sha}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "name=${{ env.CLI_NAME }} ${TAG}" >> $GITHUB_OUTPUT

      # Create draft GitHub release
      - name: Create draft release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: ${{ steps.tag.outputs.name }}
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Package only the executable + SamsungCerts into a zip
      - name: Create zip packages
        run: |
          set -e
          for rid_dir in $GITHUB_WORKSPACE/${{ env.OUTPUT_DIR }}/*; do
            if [ -d "$rid_dir" ]; then
              rid=$(basename "$rid_dir")
              exe_name=$(ls "$rid_dir" | grep -v .dbg | head -n1)
              zip_name="${{ env.CLI_NAME }}-${rid}.zip"
              echo "Creating zip $zip_name with $exe_name + SamsungCerts..."
              cd "$rid_dir"
              zip -r "../../$zip_name" "$exe_name" SamsungCerts
              cd -
            fi
          done

      # Upload zips as release assets
      - name: Upload release assets
        run: |
          set -e
          REPO="${GITHUB_REPOSITORY}"
          RELEASE_ID=${{ steps.create_release.outputs.id }}
          echo "Uploading zip assets to release id: $RELEASE_ID"
          for zip_file in $GITHUB_WORKSPACE/${{ env.CLI_NAME }}-*.zip; do
            filename=$(basename "$zip_file")
            echo "Uploading $filename ..."
            upload_url="https://uploads.github.com/repos/${REPO}/releases/${RELEASE_ID}/assets?name=${filename}"
            curl --fail -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/zip" \
              --data-binary @"$zip_file" \
              "$upload_url"
            echo "Uploaded $filename"
          done

      - name: Show release URL
        run: |
          echo "Draft release created: https://github.com/${GITHUB_REPOSITORY}/releases/tag/${{ steps.tag.outputs.tag }}"
